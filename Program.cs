using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace FileWatcherDisposeTest
{
	class Program
	{
		static void Main (string[] args)
		{
			Console.WriteLine ("ProcessId={0}", Process.GetCurrentProcess ().Id);

			string path = Path.GetDirectoryName (typeof (Program).Assembly.Location);

			var watcher = new FileSystemWatcher (path) {
				// Need LastWrite otherwise no file change events are generated by the native file watcher.
				NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
				IncludeSubdirectories = true,
				InternalBufferSize = 32768
			};

			watcher.Changed += OnChanged;
			watcher.Created += OnChanged;
			watcher.Deleted += OnChanged;
			watcher.Renamed += OnChanged;
			watcher.Error += OnError;
			watcher.EnableRaisingEvents = true;

			// Run lsof -p pid now.
			// Expected to see every directory from the .exe directory down to top level directory.
			//
			// mono-sgen 3972 user    4r DIR   1,12      170   51740695 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest/bin/Debug/net472
			// mono-sgen 3972 user    5r DIR   1,12      136   51740600 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest/bin/Debug
			// mono-sgen 3972 user    6r DIR   1,12      102   51740599 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest/bin
			// mono-sgen 3972 user    7r DIR   1,12      204   51740594 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest
			// mono-sgen 3972 user    8r DIR   1,12      170   51740593 /Volumes/Drive/projects/tests/FileWatcherDisposeTest
			// mono-sgen 3972 user    9r DIR   1,12     6324     185300 /Volumes/Drive/projects/tests
			// mono-sgen 3972 user   10r DIR   1,12     2312        278 /Volumes/Drive/projects
			// mono-sgen 3972 user   11r DIR   1,12      646          2 /Volumes/Drive
			// mono-sgen 3972 user   12r DIR    1,4      160     420284 /Volumes

			Thread.Sleep (10000);

			watcher.EnableRaisingEvents = false;

			// Disposing does not close file descriptors listed by lsof -p pid
			// Still see the files open as shown above.
			watcher.Dispose ();

			watcher.Changed -= OnChanged;
			watcher.Created -= OnChanged;
			watcher.Deleted -= OnChanged;
			watcher.Renamed -= OnChanged;
			watcher.Error -= OnError;
			watcher = null;

			Console.WriteLine ("Disposed watcher");

			// Running GC.Collect will close the file descriptors when using Mono but not when using dotnet
			//GC.Collect ();

			Console.ReadKey ();
		}

		static void OnError (object sender, ErrorEventArgs e)
		{
		}

		static void OnChanged (object sender, FileSystemEventArgs e)
		{
		}
	}
}
